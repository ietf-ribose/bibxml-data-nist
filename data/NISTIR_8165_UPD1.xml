<reference anchor="NIST.IR.8165/Upd1" target="https://doi.org/10.6028/NIST.IR.8165-upd1">
  <front>
    <title>Impact of code complexity on software analysis</title>
    <author fullname="De Oliveira, Charles D.">
      <organization/>
    </author>
    <author fullname="Fong, Elizabeth">
      <organization/>
    </author>
    <author fullname="Black, Paul E.">
      <organization/>
    </author>
    <author>
      <organization>National Institute of Standards and Technology (U.S.)</organization>
    </author>
    <abstract>The Software Assurance Metrics and Tool Evaluation (SAMATE) team studied thousands of warnings from static analyzers. Tools have difficulty distinguishing between the absence of a weakness and the presence of a weakness that is buried in otherwise-irrelevant code elements. This paper presents classes of these code elements, which we call “code complexities.” They have been present in software assurance as part of test cases generation strategy when evaluating static analyzers. Benefits of using code complexity include the development of coding guidelines, boosting diversification of test cases.</abstract>
  </front>
  <seriesInfo name="DOI" value="NIST.IR.8165-upd1"/>
  <seriesInfo name="NISTIR" value="8165-upd1"/>
  <seriesInfo name="NISTIR; NIST IR; NIST interagency report; NIST internal report" value="8165-upd1"/>
</reference>